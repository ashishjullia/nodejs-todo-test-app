name: DEV

on:
  push:
    branches:
      - main
    tags:
      - "dev-*"
    paths-ignore:
      - "README.md"

env:
  DEPLOY_STAGE: dev
  WORKING_CODE_REPO: ${{ github.event.repository.name }}
  ECR_REPO: "sample-todo-nodejs-pgsql-app"
  ECS_TASK_DEFINITION_FAMILY: "sample-ecs-task-definition-nodejs"
  ECS_SERVICE_NAME: "sample-ecs-service-nodejs"
  ECS_CLUSTER_NAME: "dev-cluster-1"
  DEPLOY_ROLE: "arn:aws:iam::254319123211:role/example-exercise-admin-role"
  AWS_REGION: "ap-south-1"
  RDS_DETAILS_TODO_APP_SECRETS: "arn:aws:secretsmanager:ap-south-1:254319123211:secret:nodejs-todo-app-v3-8kwXqP"

permissions:
  id-token: write # This is required for requesting the JWT for step AWS Configure
  contents: read # This is required for actions/checkout

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI for "gh actions" user (assumed role)
        id: ghactions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.DEPLOY_ROLE }}
          role-session-name: "${{ github.run_id }}-${{ github.sha }}"

      - name: Update AWS Secret Manager from GitHub Secrets
        env:
          GH_RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
          GH_RDS_PORT: ${{ secrets.RDS_PORT }}         
          GH_RDS_IAM_USER: ${{ secrets.RDS_IAM_USER }}
          GH_RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}   
          GH_AWS_REGION: ${{ env.AWS_REGION }}     
        run: |
          echo "Constructing JSON payload for AWS Secrets Manager..."
          JSON_PAYLOAD=$(printf '{
            "rds_hostname": "%s",
            "rds_port": "%s",
            "rds_iam_user": "%s",
            "rds_db_name": "%s",
            "aws_region": "%s"
          }' \
          "$GH_RDS_HOSTNAME" \
          "$GH_RDS_PORT" \
          "$GH_RDS_IAM_USER" \
          "$GH_RDS_DB_NAME" \
          "$GH_AWS_REGION" \
          )

          echo "Updating secret: ${{ env.RDS_DETAILS_TODO_APP_SECRETS }}"
          aws secretsmanager update-secret \
            --secret-id "${{ env.RDS_DETAILS_TODO_APP_SECRETS }}" \
            --secret-string "$JSON_PAYLOAD" \
            --region ${{ env.AWS_REGION }}
          echo "Secret update command executed."

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # to set up Docker Buildx, which is a CLI plugin that extends the docker command with the full support of the features provided by Moby BuildKit builder toolkit.
      # It provides the same user experience as docker build and adds several advanced features like creating scoped builder instances and building against multiple nodes concurrently.
      # It provides several advanced features, including the ability to use different types of cache, like the GitHub Actions cache.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          # "gha" specifies that the cache type is GitHub Actions cache. Docker Buildx supports different types of cache, and gha is the type for GitHub Actions cache.
          # This means that Docker Buildx will use the cache provided by GitHub Actions to cache Docker layers.
          cache-from: type=gha
          # "max" mode means that Docker Buildx will use as much cache as possible.
          # It will try to find and use all applicable layers from the cache when building the Docker image.
          cache-to: type=gha,mode=max
          provenance: false

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definitions/task-definition-dev.json
          container-name: ecs_nodejs_container
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          force-new-deployment: true

      - name: Set desired count to 1
        if: success()
        run: |
          echo "Updating service ${{ env.ECS_SERVICE_NAME }} in cluster ${{ env.ECS_CLUSTER_NAME }} to desired count 1"
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service ${{ env.ECS_SERVICE_NAME }} \
            --desired-count 1 \
            --region ${{ env.AWS_REGION }}
